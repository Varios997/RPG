<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup das variaveis
hsp = 0;
vsp = 0;
movespeed = 6;
image_speed = 0;
imgsp = 0.3;
max_hp = 100;
hp = 100;
spr_right = spr_player_right;
spr_left = spr_player_left;
spr_up = spr_player_up;
spr_down = spr_player_down;
spr_up_right = spr_player_up_right;
spr_up_left = spr_player_up_left;
spr_down_right = spr_player_down_right;
spr_down_left = spr_player_down_left;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input

right = (keyboard_check(vk_right)) || keyboard_check(ord("D"));
left = (keyboard_check(vk_left)) || keyboard_check(ord("A"));
up = (keyboard_check(vk_up)) || keyboard_check(ord("W"));
down = (keyboard_check(vk_down)) || keyboard_check(ord("S"));
space = (keyboard_check(vk_space));

vsp = movespeed;
hsp = movespeed;

if(right) 
{
    sprite_index = spr_right;
    image_speed = imgsp;
    if(place_meeting(x+hsp, y, (obj_wall)))
    {
        while(!place_meeting(x+ sign(hsp), y, obj_wall))
        {
            x += sign(hsp);
        }
    hsp = 0;
    }
    x += hsp;
}

if(left) 
{
    image_speed = imgsp;
    sprite_index = spr_left;
    if(place_meeting(x-hsp, y, (obj_wall)))
    {
        while(!place_meeting(x- sign(hsp), y, obj_wall))
        {
            x -= sign(hsp);
        }
    hsp = 0;
    }
    x -= hsp;
}

if(up) 
{
    sprite_index = spr_up;
    image_speed = imgsp;
    if(place_meeting(x, y-vsp, (obj_wall)))
    {
        while(!place_meeting(x, y- sign(vsp), obj_wall))
        {
            y -= sign(vsp);
        }
    vsp = 0;
    }
    y -= vsp;
}

if(down) 
{
    sprite_index = spr_down;
    image_speed = imgsp;
    if(place_meeting(x, y+vsp, (obj_wall)))
    {
        while(!place_meeting(x, y+ sign(vsp), obj_wall))
        {
            y += sign(vsp);
        }
    vsp = 0;
    }
    y += vsp;
}

if(up &amp;&amp; right){sprite_index = spr_up_right;}
if(up &amp;&amp; left){sprite_index = spr_up_left;}
if(down &amp;&amp; right){sprite_index = spr_down_right;}
if(down &amp;&amp; left){sprite_index = spr_down_left;}








if(space)
{
    
}

//Collisions

/*if(place_meeting(x, y+msp, (obj_wall)))
{
    while(!place_meeting(x, y+ sign(msp), obj_wall))
    {
        y += sign(msp);
    }
    msp = 0;
    if(sprite_index = spr_fredjumpright){sprite_index = spr_fredright;}
    if(sprite_index = spr_fredjumpleft){sprite_index = spr_fredleft;}
}
y += msp;*/

if(!right &amp;&amp; !left &amp;&amp; !up &amp;&amp; !down)
{
    image_index = 0;
    image_speed = 0;
}

/*if(msp != 0)
{
     if(sprite_index = spr_player_down){sprite_index = spr_player;}
     if(sprite_index = spr_player){sprite_index = spr_player;}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_healthbar(x - 16,y - 40,x + 16, y - 45,(hp/max_hp)*100,c_gray,c_red,c_green,0,true,true);
draw_healthbar(100,300,140,320,(hp/max_hp)*100,c_gray,c_red,c_green,0,true,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
